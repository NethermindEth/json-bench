
services:
  grafana:
    image: grafana/grafana:10.2.0
    container_name: jsonrpc-bench-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_INSTALL_PLUGINS=grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN:-localhost}
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL:-http://localhost:3000/}
      # Use SQLite for Grafana's own data (simpler setup)
      # PostgreSQL will be used as a data source, not for Grafana's internal data
      - GF_ALERTING_ENABLED=false
      - GF_ALERTING_EXECUTE_ALERTS=false
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_MIN_INTERVAL_SECONDS=10
      - GF_ALERTING_MAX_ATTEMPTS=3
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      - GF_PATHS_DASHBOARDS=/var/lib/grafana/dashboards
      - GF_SMTP_ENABLED=${GF_SMTP_ENABLED:-false}
      - GF_SMTP_HOST=${GF_SMTP_HOST:-}
      - GF_SMTP_USER=${GF_SMTP_USER:-}
      - GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD:-}
      - GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS:-}
      - GF_SMTP_FROM_NAME=${GF_SMTP_FROM_NAME:-JSON-RPC Bench Alerts}
      # Webhook URLs for notifications
      - WEBHOOK_CI_URL=${WEBHOOK_CI_URL:-}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - GITHUB_WEBHOOK_URL=${GITHUB_WEBHOOK_URL:-}
      # Authentication tokens
      - CI_WEBHOOK_TOKEN=${CI_WEBHOOK_TOKEN:-}
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET:-}
      # Email Configuration
      - ALERT_EMAIL_ADDRESSES=${ALERT_EMAIL_ADDRESSES:-}
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
      - ./dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - jsonrpc-bench-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: jsonrpc-bench-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-jsonrpc_bench}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - jsonrpc-bench-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-jsonrpc_bench}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: jsonrpc-bench-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - jsonrpc-bench-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # runner:
  #   build:
  #     context: ..
  #     dockerfile: runner/Dockerfile
  #   container_name: jsonrpc-bench-runner
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - DATABASE_URL=postgres://postgres:postgres@postgres:5432/jsonrpc_bench?sslmode=disable
  #     - API_PORT=8080
  #     - LOG_LEVEL=info
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - jsonrpc-bench-network
  #   volumes:
  #     - ../config:/app/config
  #     - ../results:/app/results
  #     - ../historic:/app/historic
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

volumes:
  grafana-storage:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  jsonrpc-bench-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16