services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jsonrpc-bench-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-jsonrpc_bench}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./metrics/init-db-clean.sql:/docker-entrypoint-initdb.d/init-db-clean.sql
    networks:
      - jsonrpc-bench-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-jsonrpc_bench}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: jsonrpc-bench-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - jsonrpc-bench-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: jsonrpc-bench-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    networks:
      - jsonrpc-bench-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # JSON-RPC Benchmark Runner API
  runner:
    build:
      context: .
      dockerfile: runner/Dockerfile
    container_name: jsonrpc-bench-runner
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-jsonrpc_bench}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - jsonrpc-bench-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s

  # React Dashboard UI
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: jsonrpc-bench-dashboard
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - VITE_API_BASE_URL=http://runner:8081
    depends_on:
      postgres:
        condition: service_healthy
      runner:
        condition: service_healthy
    networks:
      - jsonrpc-bench-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-storage:
    driver: local

networks:
  jsonrpc-bench-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
